{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { LANGUAGE_TITLE, INTERFACE_LANGUAGE } from \"../types\";\nimport { langInt, languages } from \"../../data/languages\";\nvar initialState = {\n  interfaceLanguage: langInt['ua'],\n  languageTitle: languages[1]\n};\nexport var interfaceLanguageReducer = function interfaceLanguageReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case INTERFACE_LANGUAGE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        interfaceLanguage: action.payload\n      });\n\n    case LANGUAGE_TITLE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        languageTitle: action.payload\n      });\n\n    default:\n      return state;\n  }\n\n  return state;\n};","map":{"version":3,"sources":["/home/arpo/Pavel/textEncr/reactTextEncript/src/store/reducers/interfaceLanguage.js"],"names":["LANGUAGE_TITLE","INTERFACE_LANGUAGE","langInt","languages","initialState","interfaceLanguage","languageTitle","interfaceLanguageReducer","state","action","type","payload"],"mappings":";;;;;;AAAA,SACIA,cADJ,EACmBC,kBADnB;AAGA,SAAOC,OAAP,EAAgBC,SAAhB;AACA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,iBAAiB,EAAEH,OAAO,CAAC,IAAD,CADT;AAEjBI,EAAAA,aAAa,EAAEH,SAAS,CAAC,CAAD;AAFP,CAArB;AAKA,OAAO,IAAMI,wBAAwB,GAAG,SAA3BA,wBAA2B,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBJ,YAAyB;AAAA,MAAXK,MAAW;;AACtE,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,kBAAL;AAAyB,6CAAYO,KAAZ;AAAmBH,QAAAA,iBAAiB,EAAEI,MAAM,CAACE;AAA7C;;AACzB,SAAKX,cAAL;AAAqB,6CAAYQ,KAAZ;AAAmBF,QAAAA,aAAa,EAAEG,MAAM,CAACE;AAAzC;;AACrB;AAAS,aAAOH,KAAP;AAHb;;AAKA,SAAOA,KAAP;AACH,CAPM","sourcesContent":["import {\n    LANGUAGE_TITLE,INTERFACE_LANGUAGE\n} from \"../types\";\nimport{langInt, languages} from \"../../data/languages\"\nconst initialState = {\n    interfaceLanguage: langInt['ua'],\n    languageTitle: languages[1],\n    \n};\nexport const interfaceLanguageReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case INTERFACE_LANGUAGE: return { ...state, interfaceLanguage: action.payload };\n        case LANGUAGE_TITLE: return { ...state, languageTitle: action.payload }\n        default: return state\n    }\n    return state;\n};\n"]},"metadata":{},"sourceType":"module"}